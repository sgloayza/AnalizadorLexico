Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BOOL
    BREAK
    CASE
    CDER
    CIZQ
    COMA
    COMILLAD
    COMILLAS
    DO
    DOSPUNTOS
    DOUBLE
    DRESTA
    DSUMA
    DYNAMIC
    ELSE
    ELSEIF
    FLECHA
    FOR
    FUNCIONARR
    FUNCIONRANGE
    FUNCIONSTDIN
    FUNCIONSTDOUT
    FUNCIONSTRING
    FUNCIONTAKE
    INT
    IS
    ISNEGADO
    LIST
    MAP
    NOT
    NUM
    OR
    RETURN
    SET
    STRING
    SWITCH
    VAR

Grammar

Rule 0     S' -> final
Rule 1     final -> expresion PUNTOYCOMA
Rule 2     final -> asignacion PUNTOYCOMA
Rule 3     final -> imprimir PUNTOYCOMA
Rule 4     final -> sentenciaIf PUNTOYCOMA
Rule 5     final -> sentenciaIf
Rule 6     final -> sentenciaWhile
Rule 7     final -> sentenciaWhile PUNTOYCOMA
Rule 8     algoritmo -> imprimir PUNTOYCOMA
Rule 9     algoritmo -> asignacion PUNTOYCOMA
Rule 10    algoritmo -> expresion PUNTOYCOMA
Rule 11    algoritmo -> comparacion PUNTOYCOMA
Rule 12    algoritmo -> sentenciaWhile
Rule 13    algoritmo -> sentenciaWhile PUNTOYCOMA
Rule 14    algoritmo -> sentenciaIf PUNTOYCOMA
Rule 15    algoritmo -> sentenciaIf
Rule 16    sentenciaIf -> IF PIZQ comparacion PDER algoritmo
Rule 17    sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 18    sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
Rule 19    sentenciaWhile -> WHILE PIZQ comparacion PDER algoritmo
Rule 20    imprimir -> PRINT PIZQ expresion PDER
Rule 21    asignacion -> VARIABLE IGUAL expresion
Rule 22    comparacion -> expresion operadorComp expresion
Rule 23    operadorComp -> DIGUAL
Rule 24    operadorComp -> NOIGUAL
Rule 25    operadorComp -> MAYOR
Rule 26    operadorComp -> MENOR
Rule 27    operadorComp -> MAYIGUAL
Rule 28    operadorComp -> MENIGUAL
Rule 29    expresion -> valor
Rule 30    valor -> ENTERO
Rule 31    valor -> VARIABLE
Rule 32    expresion -> valor operadorMat expresion
Rule 33    operadorMat -> SUMA
Rule 34    operadorMat -> RESTA
Rule 35    operadorMat -> MULTI
Rule 36    operadorMat -> DIV
Rule 37    operadorMat -> DIVENTERO
Rule 38    operadorMat -> MOD

Terminals, with rules where they appear

AND                  : 
AS                   : 
BOOL                 : 
BREAK                : 
CASE                 : 
CDER                 : 
CIZQ                 : 
COMA                 : 
COMILLAD             : 
COMILLAS             : 
DIGUAL               : 23
DIV                  : 36
DIVENTERO            : 37
DO                   : 
DOSPUNTOS            : 
DOUBLE               : 
DRESTA               : 
DSUMA                : 
DYNAMIC              : 
ELSE                 : 
ELSEIF               : 
ENTERO               : 30
FLECHA               : 
FOR                  : 
FUNCIONARR           : 
FUNCIONRANGE         : 
FUNCIONSTDIN         : 
FUNCIONSTDOUT        : 
FUNCIONSTRING        : 
FUNCIONTAKE          : 
IF                   : 16 17
IGUAL                : 21
INT                  : 
IS                   : 
ISNEGADO             : 
LDER                 : 17 18
LIST                 : 
LIZQ                 : 17 18
MAP                  : 
MAYIGUAL             : 27
MAYOR                : 25
MENIGUAL             : 28
MENOR                : 26
MOD                  : 38
MULTI                : 35
NOIGUAL              : 24
NOT                  : 
NUM                  : 
OR                   : 
PDER                 : 16 17 18 19 20
PIZQ                 : 16 17 18 19 20
PRINT                : 20
PUNTOYCOMA           : 1 2 3 4 7 8 9 10 11 13 14
RESTA                : 34
RETURN               : 
SET                  : 
STRING               : 
SUMA                 : 33
SWITCH               : 
VAR                  : 
VARIABLE             : 21 31
WHILE                : 18 19
error                : 

Nonterminals, with rules where they appear

algoritmo            : 16 17 18 19
asignacion           : 2 9
comparacion          : 11 16 17 18 19
expresion            : 1 10 20 21 22 22 32
final                : 0
imprimir             : 3 8
operadorComp         : 22
operadorMat          : 32
sentenciaIf          : 4 5 14 15
sentenciaWhile       : 6 7 12 13
valor                : 29 32

Parsing method: LALR

state 0

    (0) S' -> . final
    (1) final -> . expresion PUNTOYCOMA
    (2) final -> . asignacion PUNTOYCOMA
    (3) final -> . imprimir PUNTOYCOMA
    (4) final -> . sentenciaIf PUNTOYCOMA
    (5) final -> . sentenciaIf
    (6) final -> . sentenciaWhile
    (7) final -> . sentenciaWhile PUNTOYCOMA
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (21) asignacion -> . VARIABLE IGUAL expresion
    (20) imprimir -> . PRINT PIZQ expresion PDER
    (16) sentenciaIf -> . IF PIZQ comparacion PDER algoritmo
    (17) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER
    (18) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> . WHILE PIZQ comparacion PDER algoritmo
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    VARIABLE        shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    ENTERO          shift and go to state 12

    final                          shift and go to state 1
    expresion                      shift and go to state 2
    asignacion                     shift and go to state 3
    imprimir                       shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaWhile                 shift and go to state 6
    valor                          shift and go to state 7

state 1

    (0) S' -> final .



state 2

    (1) final -> expresion . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 13


state 3

    (2) final -> asignacion . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 14


state 4

    (3) final -> imprimir . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 15


state 5

    (4) final -> sentenciaIf . PUNTOYCOMA
    (5) final -> sentenciaIf .

    PUNTOYCOMA      shift and go to state 16
    $end            reduce using rule 5 (final -> sentenciaIf .)


state 6

    (6) final -> sentenciaWhile .
    (7) final -> sentenciaWhile . PUNTOYCOMA

    $end            reduce using rule 6 (final -> sentenciaWhile .)
    PUNTOYCOMA      shift and go to state 17


state 7

    (29) expresion -> valor .
    (32) expresion -> valor . operadorMat expresion
    (33) operadorMat -> . SUMA
    (34) operadorMat -> . RESTA
    (35) operadorMat -> . MULTI
    (36) operadorMat -> . DIV
    (37) operadorMat -> . DIVENTERO
    (38) operadorMat -> . MOD

    PUNTOYCOMA      reduce using rule 29 (expresion -> valor .)
    PDER            reduce using rule 29 (expresion -> valor .)
    DIGUAL          reduce using rule 29 (expresion -> valor .)
    NOIGUAL         reduce using rule 29 (expresion -> valor .)
    MAYOR           reduce using rule 29 (expresion -> valor .)
    MENOR           reduce using rule 29 (expresion -> valor .)
    MAYIGUAL        reduce using rule 29 (expresion -> valor .)
    MENIGUAL        reduce using rule 29 (expresion -> valor .)
    SUMA            shift and go to state 19
    RESTA           shift and go to state 20
    MULTI           shift and go to state 21
    DIV             shift and go to state 22
    DIVENTERO       shift and go to state 23
    MOD             shift and go to state 24

    operadorMat                    shift and go to state 18

state 8

    (21) asignacion -> VARIABLE . IGUAL expresion
    (31) valor -> VARIABLE .

    IGUAL           shift and go to state 25
    SUMA            reduce using rule 31 (valor -> VARIABLE .)
    RESTA           reduce using rule 31 (valor -> VARIABLE .)
    MULTI           reduce using rule 31 (valor -> VARIABLE .)
    DIV             reduce using rule 31 (valor -> VARIABLE .)
    DIVENTERO       reduce using rule 31 (valor -> VARIABLE .)
    MOD             reduce using rule 31 (valor -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 31 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 31 (valor -> VARIABLE .)
    NOIGUAL         reduce using rule 31 (valor -> VARIABLE .)
    MAYOR           reduce using rule 31 (valor -> VARIABLE .)
    MENOR           reduce using rule 31 (valor -> VARIABLE .)
    MAYIGUAL        reduce using rule 31 (valor -> VARIABLE .)
    MENIGUAL        reduce using rule 31 (valor -> VARIABLE .)


state 9

    (20) imprimir -> PRINT . PIZQ expresion PDER

    PIZQ            shift and go to state 26


state 10

    (16) sentenciaIf -> IF . PIZQ comparacion PDER algoritmo
    (17) sentenciaIf -> IF . PIZQ comparacion PDER LIZQ algoritmo LDER

    PIZQ            shift and go to state 27


state 11

    (18) sentenciaWhile -> WHILE . PIZQ comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> WHILE . PIZQ comparacion PDER algoritmo

    PIZQ            shift and go to state 28


state 12

    (30) valor -> ENTERO .

    SUMA            reduce using rule 30 (valor -> ENTERO .)
    RESTA           reduce using rule 30 (valor -> ENTERO .)
    MULTI           reduce using rule 30 (valor -> ENTERO .)
    DIV             reduce using rule 30 (valor -> ENTERO .)
    DIVENTERO       reduce using rule 30 (valor -> ENTERO .)
    MOD             reduce using rule 30 (valor -> ENTERO .)
    PUNTOYCOMA      reduce using rule 30 (valor -> ENTERO .)
    PDER            reduce using rule 30 (valor -> ENTERO .)
    DIGUAL          reduce using rule 30 (valor -> ENTERO .)
    NOIGUAL         reduce using rule 30 (valor -> ENTERO .)
    MAYOR           reduce using rule 30 (valor -> ENTERO .)
    MENOR           reduce using rule 30 (valor -> ENTERO .)
    MAYIGUAL        reduce using rule 30 (valor -> ENTERO .)
    MENIGUAL        reduce using rule 30 (valor -> ENTERO .)


state 13

    (1) final -> expresion PUNTOYCOMA .

    $end            reduce using rule 1 (final -> expresion PUNTOYCOMA .)


state 14

    (2) final -> asignacion PUNTOYCOMA .

    $end            reduce using rule 2 (final -> asignacion PUNTOYCOMA .)


state 15

    (3) final -> imprimir PUNTOYCOMA .

    $end            reduce using rule 3 (final -> imprimir PUNTOYCOMA .)


state 16

    (4) final -> sentenciaIf PUNTOYCOMA .

    $end            reduce using rule 4 (final -> sentenciaIf PUNTOYCOMA .)


state 17

    (7) final -> sentenciaWhile PUNTOYCOMA .

    $end            reduce using rule 7 (final -> sentenciaWhile PUNTOYCOMA .)


state 18

    (32) expresion -> valor operadorMat . expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    ENTERO          shift and go to state 12
    VARIABLE        shift and go to state 30

    valor                          shift and go to state 7
    expresion                      shift and go to state 29

state 19

    (33) operadorMat -> SUMA .

    ENTERO          reduce using rule 33 (operadorMat -> SUMA .)
    VARIABLE        reduce using rule 33 (operadorMat -> SUMA .)


state 20

    (34) operadorMat -> RESTA .

    ENTERO          reduce using rule 34 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 34 (operadorMat -> RESTA .)


state 21

    (35) operadorMat -> MULTI .

    ENTERO          reduce using rule 35 (operadorMat -> MULTI .)
    VARIABLE        reduce using rule 35 (operadorMat -> MULTI .)


state 22

    (36) operadorMat -> DIV .

    ENTERO          reduce using rule 36 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 36 (operadorMat -> DIV .)


state 23

    (37) operadorMat -> DIVENTERO .

    ENTERO          reduce using rule 37 (operadorMat -> DIVENTERO .)
    VARIABLE        reduce using rule 37 (operadorMat -> DIVENTERO .)


state 24

    (38) operadorMat -> MOD .

    ENTERO          reduce using rule 38 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 38 (operadorMat -> MOD .)


state 25

    (21) asignacion -> VARIABLE IGUAL . expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    ENTERO          shift and go to state 12
    VARIABLE        shift and go to state 30

    expresion                      shift and go to state 31
    valor                          shift and go to state 7

state 26

    (20) imprimir -> PRINT PIZQ . expresion PDER
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    ENTERO          shift and go to state 12
    VARIABLE        shift and go to state 30

    expresion                      shift and go to state 32
    valor                          shift and go to state 7

state 27

    (16) sentenciaIf -> IF PIZQ . comparacion PDER algoritmo
    (17) sentenciaIf -> IF PIZQ . comparacion PDER LIZQ algoritmo LDER
    (22) comparacion -> . expresion operadorComp expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    ENTERO          shift and go to state 12
    VARIABLE        shift and go to state 30

    comparacion                    shift and go to state 33
    expresion                      shift and go to state 34
    valor                          shift and go to state 7

state 28

    (18) sentenciaWhile -> WHILE PIZQ . comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> WHILE PIZQ . comparacion PDER algoritmo
    (22) comparacion -> . expresion operadorComp expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    ENTERO          shift and go to state 12
    VARIABLE        shift and go to state 30

    comparacion                    shift and go to state 35
    expresion                      shift and go to state 34
    valor                          shift and go to state 7

state 29

    (32) expresion -> valor operadorMat expresion .

    PUNTOYCOMA      reduce using rule 32 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 32 (expresion -> valor operadorMat expresion .)
    DIGUAL          reduce using rule 32 (expresion -> valor operadorMat expresion .)
    NOIGUAL         reduce using rule 32 (expresion -> valor operadorMat expresion .)
    MAYOR           reduce using rule 32 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 32 (expresion -> valor operadorMat expresion .)
    MAYIGUAL        reduce using rule 32 (expresion -> valor operadorMat expresion .)
    MENIGUAL        reduce using rule 32 (expresion -> valor operadorMat expresion .)


state 30

    (31) valor -> VARIABLE .

    SUMA            reduce using rule 31 (valor -> VARIABLE .)
    RESTA           reduce using rule 31 (valor -> VARIABLE .)
    MULTI           reduce using rule 31 (valor -> VARIABLE .)
    DIV             reduce using rule 31 (valor -> VARIABLE .)
    DIVENTERO       reduce using rule 31 (valor -> VARIABLE .)
    MOD             reduce using rule 31 (valor -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 31 (valor -> VARIABLE .)
    PDER            reduce using rule 31 (valor -> VARIABLE .)
    DIGUAL          reduce using rule 31 (valor -> VARIABLE .)
    NOIGUAL         reduce using rule 31 (valor -> VARIABLE .)
    MAYOR           reduce using rule 31 (valor -> VARIABLE .)
    MENOR           reduce using rule 31 (valor -> VARIABLE .)
    MAYIGUAL        reduce using rule 31 (valor -> VARIABLE .)
    MENIGUAL        reduce using rule 31 (valor -> VARIABLE .)


state 31

    (21) asignacion -> VARIABLE IGUAL expresion .

    PUNTOYCOMA      reduce using rule 21 (asignacion -> VARIABLE IGUAL expresion .)


state 32

    (20) imprimir -> PRINT PIZQ expresion . PDER

    PDER            shift and go to state 36


state 33

    (16) sentenciaIf -> IF PIZQ comparacion . PDER algoritmo
    (17) sentenciaIf -> IF PIZQ comparacion . PDER LIZQ algoritmo LDER

    PDER            shift and go to state 37


state 34

    (22) comparacion -> expresion . operadorComp expresion
    (23) operadorComp -> . DIGUAL
    (24) operadorComp -> . NOIGUAL
    (25) operadorComp -> . MAYOR
    (26) operadorComp -> . MENOR
    (27) operadorComp -> . MAYIGUAL
    (28) operadorComp -> . MENIGUAL

    DIGUAL          shift and go to state 39
    NOIGUAL         shift and go to state 40
    MAYOR           shift and go to state 41
    MENOR           shift and go to state 42
    MAYIGUAL        shift and go to state 43
    MENIGUAL        shift and go to state 44

    operadorComp                   shift and go to state 38

state 35

    (18) sentenciaWhile -> WHILE PIZQ comparacion . PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> WHILE PIZQ comparacion . PDER algoritmo

    PDER            shift and go to state 45


state 36

    (20) imprimir -> PRINT PIZQ expresion PDER .

    PUNTOYCOMA      reduce using rule 20 (imprimir -> PRINT PIZQ expresion PDER .)


state 37

    (16) sentenciaIf -> IF PIZQ comparacion PDER . algoritmo
    (17) sentenciaIf -> IF PIZQ comparacion PDER . LIZQ algoritmo LDER
    (8) algoritmo -> . imprimir PUNTOYCOMA
    (9) algoritmo -> . asignacion PUNTOYCOMA
    (10) algoritmo -> . expresion PUNTOYCOMA
    (11) algoritmo -> . comparacion PUNTOYCOMA
    (12) algoritmo -> . sentenciaWhile
    (13) algoritmo -> . sentenciaWhile PUNTOYCOMA
    (14) algoritmo -> . sentenciaIf PUNTOYCOMA
    (15) algoritmo -> . sentenciaIf
    (20) imprimir -> . PRINT PIZQ expresion PDER
    (21) asignacion -> . VARIABLE IGUAL expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (18) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> . WHILE PIZQ comparacion PDER algoritmo
    (16) sentenciaIf -> . IF PIZQ comparacion PDER algoritmo
    (17) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    LIZQ            shift and go to state 48
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 8
    WHILE           shift and go to state 11
    IF              shift and go to state 10
    ENTERO          shift and go to state 12

    comparacion                    shift and go to state 46
    algoritmo                      shift and go to state 47
    imprimir                       shift and go to state 49
    asignacion                     shift and go to state 50
    expresion                      shift and go to state 51
    sentenciaWhile                 shift and go to state 52
    sentenciaIf                    shift and go to state 53
    valor                          shift and go to state 7

state 38

    (22) comparacion -> expresion operadorComp . expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    ENTERO          shift and go to state 12
    VARIABLE        shift and go to state 30

    expresion                      shift and go to state 54
    valor                          shift and go to state 7

state 39

    (23) operadorComp -> DIGUAL .

    ENTERO          reduce using rule 23 (operadorComp -> DIGUAL .)
    VARIABLE        reduce using rule 23 (operadorComp -> DIGUAL .)


state 40

    (24) operadorComp -> NOIGUAL .

    ENTERO          reduce using rule 24 (operadorComp -> NOIGUAL .)
    VARIABLE        reduce using rule 24 (operadorComp -> NOIGUAL .)


state 41

    (25) operadorComp -> MAYOR .

    ENTERO          reduce using rule 25 (operadorComp -> MAYOR .)
    VARIABLE        reduce using rule 25 (operadorComp -> MAYOR .)


state 42

    (26) operadorComp -> MENOR .

    ENTERO          reduce using rule 26 (operadorComp -> MENOR .)
    VARIABLE        reduce using rule 26 (operadorComp -> MENOR .)


state 43

    (27) operadorComp -> MAYIGUAL .

    ENTERO          reduce using rule 27 (operadorComp -> MAYIGUAL .)
    VARIABLE        reduce using rule 27 (operadorComp -> MAYIGUAL .)


state 44

    (28) operadorComp -> MENIGUAL .

    ENTERO          reduce using rule 28 (operadorComp -> MENIGUAL .)
    VARIABLE        reduce using rule 28 (operadorComp -> MENIGUAL .)


state 45

    (18) sentenciaWhile -> WHILE PIZQ comparacion PDER . LIZQ algoritmo LDER
    (19) sentenciaWhile -> WHILE PIZQ comparacion PDER . algoritmo
    (8) algoritmo -> . imprimir PUNTOYCOMA
    (9) algoritmo -> . asignacion PUNTOYCOMA
    (10) algoritmo -> . expresion PUNTOYCOMA
    (11) algoritmo -> . comparacion PUNTOYCOMA
    (12) algoritmo -> . sentenciaWhile
    (13) algoritmo -> . sentenciaWhile PUNTOYCOMA
    (14) algoritmo -> . sentenciaIf PUNTOYCOMA
    (15) algoritmo -> . sentenciaIf
    (20) imprimir -> . PRINT PIZQ expresion PDER
    (21) asignacion -> . VARIABLE IGUAL expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (18) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> . WHILE PIZQ comparacion PDER algoritmo
    (16) sentenciaIf -> . IF PIZQ comparacion PDER algoritmo
    (17) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    LIZQ            shift and go to state 55
    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 8
    WHILE           shift and go to state 11
    IF              shift and go to state 10
    ENTERO          shift and go to state 12

    comparacion                    shift and go to state 46
    algoritmo                      shift and go to state 56
    imprimir                       shift and go to state 49
    asignacion                     shift and go to state 50
    expresion                      shift and go to state 51
    sentenciaWhile                 shift and go to state 52
    sentenciaIf                    shift and go to state 53
    valor                          shift and go to state 7

state 46

    (11) algoritmo -> comparacion . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 57


state 47

    (16) sentenciaIf -> IF PIZQ comparacion PDER algoritmo .

    PUNTOYCOMA      reduce using rule 16 (sentenciaIf -> IF PIZQ comparacion PDER algoritmo .)
    $end            reduce using rule 16 (sentenciaIf -> IF PIZQ comparacion PDER algoritmo .)
    LDER            reduce using rule 16 (sentenciaIf -> IF PIZQ comparacion PDER algoritmo .)


state 48

    (17) sentenciaIf -> IF PIZQ comparacion PDER LIZQ . algoritmo LDER
    (8) algoritmo -> . imprimir PUNTOYCOMA
    (9) algoritmo -> . asignacion PUNTOYCOMA
    (10) algoritmo -> . expresion PUNTOYCOMA
    (11) algoritmo -> . comparacion PUNTOYCOMA
    (12) algoritmo -> . sentenciaWhile
    (13) algoritmo -> . sentenciaWhile PUNTOYCOMA
    (14) algoritmo -> . sentenciaIf PUNTOYCOMA
    (15) algoritmo -> . sentenciaIf
    (20) imprimir -> . PRINT PIZQ expresion PDER
    (21) asignacion -> . VARIABLE IGUAL expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (18) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> . WHILE PIZQ comparacion PDER algoritmo
    (16) sentenciaIf -> . IF PIZQ comparacion PDER algoritmo
    (17) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 8
    WHILE           shift and go to state 11
    IF              shift and go to state 10
    ENTERO          shift and go to state 12

    comparacion                    shift and go to state 46
    algoritmo                      shift and go to state 58
    imprimir                       shift and go to state 49
    asignacion                     shift and go to state 50
    expresion                      shift and go to state 51
    sentenciaWhile                 shift and go to state 52
    sentenciaIf                    shift and go to state 53
    valor                          shift and go to state 7

state 49

    (8) algoritmo -> imprimir . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 59


state 50

    (9) algoritmo -> asignacion . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 60


state 51

    (10) algoritmo -> expresion . PUNTOYCOMA
    (22) comparacion -> expresion . operadorComp expresion
    (23) operadorComp -> . DIGUAL
    (24) operadorComp -> . NOIGUAL
    (25) operadorComp -> . MAYOR
    (26) operadorComp -> . MENOR
    (27) operadorComp -> . MAYIGUAL
    (28) operadorComp -> . MENIGUAL

    PUNTOYCOMA      shift and go to state 61
    DIGUAL          shift and go to state 39
    NOIGUAL         shift and go to state 40
    MAYOR           shift and go to state 41
    MENOR           shift and go to state 42
    MAYIGUAL        shift and go to state 43
    MENIGUAL        shift and go to state 44

    operadorComp                   shift and go to state 38

state 52

    (12) algoritmo -> sentenciaWhile .
    (13) algoritmo -> sentenciaWhile . PUNTOYCOMA

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    $end            reduce using rule 12 (algoritmo -> sentenciaWhile .)
    LDER            reduce using rule 12 (algoritmo -> sentenciaWhile .)
    PUNTOYCOMA      shift and go to state 62

  ! PUNTOYCOMA      [ reduce using rule 12 (algoritmo -> sentenciaWhile .) ]


state 53

    (14) algoritmo -> sentenciaIf . PUNTOYCOMA
    (15) algoritmo -> sentenciaIf .

  ! shift/reduce conflict for PUNTOYCOMA resolved as shift
    PUNTOYCOMA      shift and go to state 63
    $end            reduce using rule 15 (algoritmo -> sentenciaIf .)
    LDER            reduce using rule 15 (algoritmo -> sentenciaIf .)

  ! PUNTOYCOMA      [ reduce using rule 15 (algoritmo -> sentenciaIf .) ]


state 54

    (22) comparacion -> expresion operadorComp expresion .

    PDER            reduce using rule 22 (comparacion -> expresion operadorComp expresion .)
    PUNTOYCOMA      reduce using rule 22 (comparacion -> expresion operadorComp expresion .)


state 55

    (18) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ . algoritmo LDER
    (8) algoritmo -> . imprimir PUNTOYCOMA
    (9) algoritmo -> . asignacion PUNTOYCOMA
    (10) algoritmo -> . expresion PUNTOYCOMA
    (11) algoritmo -> . comparacion PUNTOYCOMA
    (12) algoritmo -> . sentenciaWhile
    (13) algoritmo -> . sentenciaWhile PUNTOYCOMA
    (14) algoritmo -> . sentenciaIf PUNTOYCOMA
    (15) algoritmo -> . sentenciaIf
    (20) imprimir -> . PRINT PIZQ expresion PDER
    (21) asignacion -> . VARIABLE IGUAL expresion
    (29) expresion -> . valor
    (32) expresion -> . valor operadorMat expresion
    (22) comparacion -> . expresion operadorComp expresion
    (18) sentenciaWhile -> . WHILE PIZQ comparacion PDER LIZQ algoritmo LDER
    (19) sentenciaWhile -> . WHILE PIZQ comparacion PDER algoritmo
    (16) sentenciaIf -> . IF PIZQ comparacion PDER algoritmo
    (17) sentenciaIf -> . IF PIZQ comparacion PDER LIZQ algoritmo LDER
    (30) valor -> . ENTERO
    (31) valor -> . VARIABLE

    PRINT           shift and go to state 9
    VARIABLE        shift and go to state 8
    WHILE           shift and go to state 11
    IF              shift and go to state 10
    ENTERO          shift and go to state 12

    comparacion                    shift and go to state 46
    algoritmo                      shift and go to state 64
    imprimir                       shift and go to state 49
    asignacion                     shift and go to state 50
    expresion                      shift and go to state 51
    sentenciaWhile                 shift and go to state 52
    sentenciaIf                    shift and go to state 53
    valor                          shift and go to state 7

state 56

    (19) sentenciaWhile -> WHILE PIZQ comparacion PDER algoritmo .

    PUNTOYCOMA      reduce using rule 19 (sentenciaWhile -> WHILE PIZQ comparacion PDER algoritmo .)
    $end            reduce using rule 19 (sentenciaWhile -> WHILE PIZQ comparacion PDER algoritmo .)
    LDER            reduce using rule 19 (sentenciaWhile -> WHILE PIZQ comparacion PDER algoritmo .)


state 57

    (11) algoritmo -> comparacion PUNTOYCOMA .

    PUNTOYCOMA      reduce using rule 11 (algoritmo -> comparacion PUNTOYCOMA .)
    $end            reduce using rule 11 (algoritmo -> comparacion PUNTOYCOMA .)
    LDER            reduce using rule 11 (algoritmo -> comparacion PUNTOYCOMA .)


state 58

    (17) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 65


state 59

    (8) algoritmo -> imprimir PUNTOYCOMA .

    PUNTOYCOMA      reduce using rule 8 (algoritmo -> imprimir PUNTOYCOMA .)
    $end            reduce using rule 8 (algoritmo -> imprimir PUNTOYCOMA .)
    LDER            reduce using rule 8 (algoritmo -> imprimir PUNTOYCOMA .)


state 60

    (9) algoritmo -> asignacion PUNTOYCOMA .

    PUNTOYCOMA      reduce using rule 9 (algoritmo -> asignacion PUNTOYCOMA .)
    $end            reduce using rule 9 (algoritmo -> asignacion PUNTOYCOMA .)
    LDER            reduce using rule 9 (algoritmo -> asignacion PUNTOYCOMA .)


state 61

    (10) algoritmo -> expresion PUNTOYCOMA .

    PUNTOYCOMA      reduce using rule 10 (algoritmo -> expresion PUNTOYCOMA .)
    $end            reduce using rule 10 (algoritmo -> expresion PUNTOYCOMA .)
    LDER            reduce using rule 10 (algoritmo -> expresion PUNTOYCOMA .)


state 62

    (13) algoritmo -> sentenciaWhile PUNTOYCOMA .

    PUNTOYCOMA      reduce using rule 13 (algoritmo -> sentenciaWhile PUNTOYCOMA .)
    $end            reduce using rule 13 (algoritmo -> sentenciaWhile PUNTOYCOMA .)
    LDER            reduce using rule 13 (algoritmo -> sentenciaWhile PUNTOYCOMA .)


state 63

    (14) algoritmo -> sentenciaIf PUNTOYCOMA .

    PUNTOYCOMA      reduce using rule 14 (algoritmo -> sentenciaIf PUNTOYCOMA .)
    $end            reduce using rule 14 (algoritmo -> sentenciaIf PUNTOYCOMA .)
    LDER            reduce using rule 14 (algoritmo -> sentenciaIf PUNTOYCOMA .)


state 64

    (18) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo . LDER

    LDER            shift and go to state 66


state 65

    (17) sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER .

    PUNTOYCOMA      reduce using rule 17 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 17 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 17 (sentenciaIf -> IF PIZQ comparacion PDER LIZQ algoritmo LDER .)


state 66

    (18) sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .

    PUNTOYCOMA      reduce using rule 18 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    $end            reduce using rule 18 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)
    LDER            reduce using rule 18 (sentenciaWhile -> WHILE PIZQ comparacion PDER LIZQ algoritmo LDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PUNTOYCOMA in state 52 resolved as shift
WARNING: shift/reduce conflict for PUNTOYCOMA in state 53 resolved as shift
