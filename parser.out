Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BOOL
    BREAK
    CASE
    CDER
    CIZQ
    COMA
    COMILLAD
    COMILLAS
    DIGUAL
    DO
    DOSPUNTOS
    DRESTA
    DSUMA
    DYNAMIC
    ELSE
    ELSEIF
    FLECHA
    FOR
    FUNCIONARR
    FUNCIONRANGE
    FUNCIONSTDIN
    FUNCIONSTDOUT
    FUNCIONSTRING
    FUNCIONTAKE
    IF
    IS
    ISNEGADO
    LDER
    LIST
    LIZQ
    MAP
    MAYIGUAL
    MAYOR
    MENIGUAL
    MENOR
    NOIGUAL
    NOT
    OR
    PDER
    PIZQ
    PRINT
    RETURN
    SET
    SWITCH
    VAR
    WHILE

Grammar

Rule 0     S' -> final
Rule 1     final -> algoritmo PUNTOYCOMA
Rule 2     final -> asignacion PUNTOYCOMA
Rule 3     final -> expresionInt PUNTOYCOMA
Rule 4     final -> expresionDouble PUNTOYCOMA
Rule 5     final -> expresionString PUNTOYCOMA
Rule 6     algoritmo -> asignacion PUNTOYCOMA
Rule 7     algoritmo -> expresionInt PUNTOYCOMA
Rule 8     algoritmo -> expresionDouble PUNTOYCOMA
Rule 9     algoritmo -> expresionString PUNTOYCOMA
Rule 10    asignacion -> INT VARIABLE IGUAL expresionInt
Rule 11    asignacion -> DOUBLER VARIABLE IGUAL expresionDouble
Rule 12    asignacion -> NUM VARIABLE IGUAL expresionDouble
Rule 13    asignacion -> STRINGR VARIABLE IGUAL expresionString
Rule 14    valorString -> STRING
Rule 15    valorString -> VARIABLE
Rule 16    expresionString -> valorString operadorMat expresionString
Rule 17    expresionString -> valorString
Rule 18    valorInt -> ENTERO
Rule 19    valorInt -> VARIABLE
Rule 20    expresionInt -> valorInt operadorMat expresionInt
Rule 21    expresionInt -> valorInt
Rule 22    valorDouble -> DOUBLE
Rule 23    valorDouble -> valorInt
Rule 24    expresionDouble -> valorDouble operadorMat expresionDouble
Rule 25    expresionDouble -> valorDouble
Rule 26    operadorMat -> SUMA
Rule 27    operadorMat -> RESTA
Rule 28    operadorMat -> MULTI
Rule 29    operadorMat -> DIV
Rule 30    operadorMat -> DIVENTERO
Rule 31    operadorMat -> MOD

Terminals, with rules where they appear

AND                  : 
AS                   : 
BOOL                 : 
BREAK                : 
CASE                 : 
CDER                 : 
CIZQ                 : 
COMA                 : 
COMILLAD             : 
COMILLAS             : 
DIGUAL               : 
DIV                  : 29
DIVENTERO            : 30
DO                   : 
DOSPUNTOS            : 
DOUBLE               : 22
DOUBLER              : 11
DRESTA               : 
DSUMA                : 
DYNAMIC              : 
ELSE                 : 
ELSEIF               : 
ENTERO               : 18
FLECHA               : 
FOR                  : 
FUNCIONARR           : 
FUNCIONRANGE         : 
FUNCIONSTDIN         : 
FUNCIONSTDOUT        : 
FUNCIONSTRING        : 
FUNCIONTAKE          : 
IF                   : 
IGUAL                : 10 11 12 13
INT                  : 10
IS                   : 
ISNEGADO             : 
LDER                 : 
LIST                 : 
LIZQ                 : 
MAP                  : 
MAYIGUAL             : 
MAYOR                : 
MENIGUAL             : 
MENOR                : 
MOD                  : 31
MULTI                : 28
NOIGUAL              : 
NOT                  : 
NUM                  : 12
OR                   : 
PDER                 : 
PIZQ                 : 
PRINT                : 
PUNTOYCOMA           : 1 2 3 4 5 6 7 8 9
RESTA                : 27
RETURN               : 
SET                  : 
STRING               : 14
STRINGR              : 13
SUMA                 : 26
SWITCH               : 
VAR                  : 
VARIABLE             : 10 11 12 13 15 19
WHILE                : 
error                : 

Nonterminals, with rules where they appear

algoritmo            : 1
asignacion           : 2 6
expresionDouble      : 4 8 11 12 24
expresionInt         : 3 7 10 20
expresionString      : 5 9 13 16
final                : 0
operadorMat          : 16 20 24
valorDouble          : 24 25
valorInt             : 20 21 23
valorString          : 16 17

Parsing method: LALR

state 0

    (0) S' -> . final
    (1) final -> . algoritmo PUNTOYCOMA
    (2) final -> . asignacion PUNTOYCOMA
    (3) final -> . expresionInt PUNTOYCOMA
    (4) final -> . expresionDouble PUNTOYCOMA
    (5) final -> . expresionString PUNTOYCOMA
    (6) algoritmo -> . asignacion PUNTOYCOMA
    (7) algoritmo -> . expresionInt PUNTOYCOMA
    (8) algoritmo -> . expresionDouble PUNTOYCOMA
    (9) algoritmo -> . expresionString PUNTOYCOMA
    (10) asignacion -> . INT VARIABLE IGUAL expresionInt
    (11) asignacion -> . DOUBLER VARIABLE IGUAL expresionDouble
    (12) asignacion -> . NUM VARIABLE IGUAL expresionDouble
    (13) asignacion -> . STRINGR VARIABLE IGUAL expresionString
    (20) expresionInt -> . valorInt operadorMat expresionInt
    (21) expresionInt -> . valorInt
    (24) expresionDouble -> . valorDouble operadorMat expresionDouble
    (25) expresionDouble -> . valorDouble
    (16) expresionString -> . valorString operadorMat expresionString
    (17) expresionString -> . valorString
    (18) valorInt -> . ENTERO
    (19) valorInt -> . VARIABLE
    (22) valorDouble -> . DOUBLE
    (23) valorDouble -> . valorInt
    (14) valorString -> . STRING
    (15) valorString -> . VARIABLE

    INT             shift and go to state 7
    DOUBLER         shift and go to state 9
    NUM             shift and go to state 10
    STRINGR         shift and go to state 11
    ENTERO          shift and go to state 15
    VARIABLE        shift and go to state 8
    DOUBLE          shift and go to state 16
    STRING          shift and go to state 17

    final                          shift and go to state 1
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    expresionInt                   shift and go to state 4
    expresionDouble                shift and go to state 5
    expresionString                shift and go to state 6
    valorInt                       shift and go to state 12
    valorDouble                    shift and go to state 13
    valorString                    shift and go to state 14

state 1

    (0) S' -> final .



state 2

    (1) final -> algoritmo . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 18


state 3

    (2) final -> asignacion . PUNTOYCOMA
    (6) algoritmo -> asignacion . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 19


state 4

    (3) final -> expresionInt . PUNTOYCOMA
    (7) algoritmo -> expresionInt . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 20


state 5

    (4) final -> expresionDouble . PUNTOYCOMA
    (8) algoritmo -> expresionDouble . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 21


state 6

    (5) final -> expresionString . PUNTOYCOMA
    (9) algoritmo -> expresionString . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 22


state 7

    (10) asignacion -> INT . VARIABLE IGUAL expresionInt

    VARIABLE        shift and go to state 23


state 8

    (19) valorInt -> VARIABLE .
    (15) valorString -> VARIABLE .

  ! reduce/reduce conflict for SUMA resolved using rule 15 (valorString -> VARIABLE .)
  ! reduce/reduce conflict for RESTA resolved using rule 15 (valorString -> VARIABLE .)
  ! reduce/reduce conflict for MULTI resolved using rule 15 (valorString -> VARIABLE .)
  ! reduce/reduce conflict for DIV resolved using rule 15 (valorString -> VARIABLE .)
  ! reduce/reduce conflict for DIVENTERO resolved using rule 15 (valorString -> VARIABLE .)
  ! reduce/reduce conflict for MOD resolved using rule 15 (valorString -> VARIABLE .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 15 (valorString -> VARIABLE .)
    SUMA            reduce using rule 15 (valorString -> VARIABLE .)
    RESTA           reduce using rule 15 (valorString -> VARIABLE .)
    MULTI           reduce using rule 15 (valorString -> VARIABLE .)
    DIV             reduce using rule 15 (valorString -> VARIABLE .)
    DIVENTERO       reduce using rule 15 (valorString -> VARIABLE .)
    MOD             reduce using rule 15 (valorString -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 15 (valorString -> VARIABLE .)

  ! SUMA            [ reduce using rule 19 (valorInt -> VARIABLE .) ]
  ! RESTA           [ reduce using rule 19 (valorInt -> VARIABLE .) ]
  ! MULTI           [ reduce using rule 19 (valorInt -> VARIABLE .) ]
  ! DIV             [ reduce using rule 19 (valorInt -> VARIABLE .) ]
  ! DIVENTERO       [ reduce using rule 19 (valorInt -> VARIABLE .) ]
  ! MOD             [ reduce using rule 19 (valorInt -> VARIABLE .) ]
  ! PUNTOYCOMA      [ reduce using rule 19 (valorInt -> VARIABLE .) ]


state 9

    (11) asignacion -> DOUBLER . VARIABLE IGUAL expresionDouble

    VARIABLE        shift and go to state 24


state 10

    (12) asignacion -> NUM . VARIABLE IGUAL expresionDouble

    VARIABLE        shift and go to state 25


state 11

    (13) asignacion -> STRINGR . VARIABLE IGUAL expresionString

    VARIABLE        shift and go to state 26


state 12

    (20) expresionInt -> valorInt . operadorMat expresionInt
    (21) expresionInt -> valorInt .
    (23) valorDouble -> valorInt .
    (26) operadorMat -> . SUMA
    (27) operadorMat -> . RESTA
    (28) operadorMat -> . MULTI
    (29) operadorMat -> . DIV
    (30) operadorMat -> . DIVENTERO
    (31) operadorMat -> . MOD

  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 21 (expresionInt -> valorInt .)
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for DIVENTERO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PUNTOYCOMA      reduce using rule 21 (expresionInt -> valorInt .)
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTI           shift and go to state 30
    DIV             shift and go to state 31
    DIVENTERO       shift and go to state 32
    MOD             shift and go to state 33

  ! SUMA            [ reduce using rule 23 (valorDouble -> valorInt .) ]
  ! RESTA           [ reduce using rule 23 (valorDouble -> valorInt .) ]
  ! MULTI           [ reduce using rule 23 (valorDouble -> valorInt .) ]
  ! DIV             [ reduce using rule 23 (valorDouble -> valorInt .) ]
  ! DIVENTERO       [ reduce using rule 23 (valorDouble -> valorInt .) ]
  ! MOD             [ reduce using rule 23 (valorDouble -> valorInt .) ]
  ! PUNTOYCOMA      [ reduce using rule 23 (valorDouble -> valorInt .) ]

    operadorMat                    shift and go to state 27

state 13

    (24) expresionDouble -> valorDouble . operadorMat expresionDouble
    (25) expresionDouble -> valorDouble .
    (26) operadorMat -> . SUMA
    (27) operadorMat -> . RESTA
    (28) operadorMat -> . MULTI
    (29) operadorMat -> . DIV
    (30) operadorMat -> . DIVENTERO
    (31) operadorMat -> . MOD

    PUNTOYCOMA      reduce using rule 25 (expresionDouble -> valorDouble .)
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTI           shift and go to state 30
    DIV             shift and go to state 31
    DIVENTERO       shift and go to state 32
    MOD             shift and go to state 33

    operadorMat                    shift and go to state 34

state 14

    (16) expresionString -> valorString . operadorMat expresionString
    (17) expresionString -> valorString .
    (26) operadorMat -> . SUMA
    (27) operadorMat -> . RESTA
    (28) operadorMat -> . MULTI
    (29) operadorMat -> . DIV
    (30) operadorMat -> . DIVENTERO
    (31) operadorMat -> . MOD

    PUNTOYCOMA      reduce using rule 17 (expresionString -> valorString .)
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTI           shift and go to state 30
    DIV             shift and go to state 31
    DIVENTERO       shift and go to state 32
    MOD             shift and go to state 33

    operadorMat                    shift and go to state 35

state 15

    (18) valorInt -> ENTERO .

    SUMA            reduce using rule 18 (valorInt -> ENTERO .)
    RESTA           reduce using rule 18 (valorInt -> ENTERO .)
    MULTI           reduce using rule 18 (valorInt -> ENTERO .)
    DIV             reduce using rule 18 (valorInt -> ENTERO .)
    DIVENTERO       reduce using rule 18 (valorInt -> ENTERO .)
    MOD             reduce using rule 18 (valorInt -> ENTERO .)
    PUNTOYCOMA      reduce using rule 18 (valorInt -> ENTERO .)


state 16

    (22) valorDouble -> DOUBLE .

    SUMA            reduce using rule 22 (valorDouble -> DOUBLE .)
    RESTA           reduce using rule 22 (valorDouble -> DOUBLE .)
    MULTI           reduce using rule 22 (valorDouble -> DOUBLE .)
    DIV             reduce using rule 22 (valorDouble -> DOUBLE .)
    DIVENTERO       reduce using rule 22 (valorDouble -> DOUBLE .)
    MOD             reduce using rule 22 (valorDouble -> DOUBLE .)
    PUNTOYCOMA      reduce using rule 22 (valorDouble -> DOUBLE .)


state 17

    (14) valorString -> STRING .

    SUMA            reduce using rule 14 (valorString -> STRING .)
    RESTA           reduce using rule 14 (valorString -> STRING .)
    MULTI           reduce using rule 14 (valorString -> STRING .)
    DIV             reduce using rule 14 (valorString -> STRING .)
    DIVENTERO       reduce using rule 14 (valorString -> STRING .)
    MOD             reduce using rule 14 (valorString -> STRING .)
    PUNTOYCOMA      reduce using rule 14 (valorString -> STRING .)


state 18

    (1) final -> algoritmo PUNTOYCOMA .

    $end            reduce using rule 1 (final -> algoritmo PUNTOYCOMA .)


state 19

    (2) final -> asignacion PUNTOYCOMA .
    (6) algoritmo -> asignacion PUNTOYCOMA .

    $end            reduce using rule 2 (final -> asignacion PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 6 (algoritmo -> asignacion PUNTOYCOMA .)


state 20

    (3) final -> expresionInt PUNTOYCOMA .
    (7) algoritmo -> expresionInt PUNTOYCOMA .

    $end            reduce using rule 3 (final -> expresionInt PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 7 (algoritmo -> expresionInt PUNTOYCOMA .)


state 21

    (4) final -> expresionDouble PUNTOYCOMA .
    (8) algoritmo -> expresionDouble PUNTOYCOMA .

    $end            reduce using rule 4 (final -> expresionDouble PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 8 (algoritmo -> expresionDouble PUNTOYCOMA .)


state 22

    (5) final -> expresionString PUNTOYCOMA .
    (9) algoritmo -> expresionString PUNTOYCOMA .

    $end            reduce using rule 5 (final -> expresionString PUNTOYCOMA .)
    PUNTOYCOMA      reduce using rule 9 (algoritmo -> expresionString PUNTOYCOMA .)


state 23

    (10) asignacion -> INT VARIABLE . IGUAL expresionInt

    IGUAL           shift and go to state 36


state 24

    (11) asignacion -> DOUBLER VARIABLE . IGUAL expresionDouble

    IGUAL           shift and go to state 37


state 25

    (12) asignacion -> NUM VARIABLE . IGUAL expresionDouble

    IGUAL           shift and go to state 38


state 26

    (13) asignacion -> STRINGR VARIABLE . IGUAL expresionString

    IGUAL           shift and go to state 39


state 27

    (20) expresionInt -> valorInt operadorMat . expresionInt
    (20) expresionInt -> . valorInt operadorMat expresionInt
    (21) expresionInt -> . valorInt
    (18) valorInt -> . ENTERO
    (19) valorInt -> . VARIABLE

    ENTERO          shift and go to state 15
    VARIABLE        shift and go to state 42

    valorInt                       shift and go to state 40
    expresionInt                   shift and go to state 41

state 28

    (26) operadorMat -> SUMA .

    ENTERO          reduce using rule 26 (operadorMat -> SUMA .)
    VARIABLE        reduce using rule 26 (operadorMat -> SUMA .)
    DOUBLE          reduce using rule 26 (operadorMat -> SUMA .)
    STRING          reduce using rule 26 (operadorMat -> SUMA .)


state 29

    (27) operadorMat -> RESTA .

    ENTERO          reduce using rule 27 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 27 (operadorMat -> RESTA .)
    DOUBLE          reduce using rule 27 (operadorMat -> RESTA .)
    STRING          reduce using rule 27 (operadorMat -> RESTA .)


state 30

    (28) operadorMat -> MULTI .

    ENTERO          reduce using rule 28 (operadorMat -> MULTI .)
    VARIABLE        reduce using rule 28 (operadorMat -> MULTI .)
    DOUBLE          reduce using rule 28 (operadorMat -> MULTI .)
    STRING          reduce using rule 28 (operadorMat -> MULTI .)


state 31

    (29) operadorMat -> DIV .

    ENTERO          reduce using rule 29 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 29 (operadorMat -> DIV .)
    DOUBLE          reduce using rule 29 (operadorMat -> DIV .)
    STRING          reduce using rule 29 (operadorMat -> DIV .)


state 32

    (30) operadorMat -> DIVENTERO .

    ENTERO          reduce using rule 30 (operadorMat -> DIVENTERO .)
    VARIABLE        reduce using rule 30 (operadorMat -> DIVENTERO .)
    DOUBLE          reduce using rule 30 (operadorMat -> DIVENTERO .)
    STRING          reduce using rule 30 (operadorMat -> DIVENTERO .)


state 33

    (31) operadorMat -> MOD .

    ENTERO          reduce using rule 31 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 31 (operadorMat -> MOD .)
    DOUBLE          reduce using rule 31 (operadorMat -> MOD .)
    STRING          reduce using rule 31 (operadorMat -> MOD .)


state 34

    (24) expresionDouble -> valorDouble operadorMat . expresionDouble
    (24) expresionDouble -> . valorDouble operadorMat expresionDouble
    (25) expresionDouble -> . valorDouble
    (22) valorDouble -> . DOUBLE
    (23) valorDouble -> . valorInt
    (18) valorInt -> . ENTERO
    (19) valorInt -> . VARIABLE

    DOUBLE          shift and go to state 16
    ENTERO          shift and go to state 15
    VARIABLE        shift and go to state 42

    valorDouble                    shift and go to state 13
    expresionDouble                shift and go to state 43
    valorInt                       shift and go to state 44

state 35

    (16) expresionString -> valorString operadorMat . expresionString
    (16) expresionString -> . valorString operadorMat expresionString
    (17) expresionString -> . valorString
    (14) valorString -> . STRING
    (15) valorString -> . VARIABLE

    STRING          shift and go to state 17
    VARIABLE        shift and go to state 46

    valorString                    shift and go to state 14
    expresionString                shift and go to state 45

state 36

    (10) asignacion -> INT VARIABLE IGUAL . expresionInt
    (20) expresionInt -> . valorInt operadorMat expresionInt
    (21) expresionInt -> . valorInt
    (18) valorInt -> . ENTERO
    (19) valorInt -> . VARIABLE

    ENTERO          shift and go to state 15
    VARIABLE        shift and go to state 42

    expresionInt                   shift and go to state 47
    valorInt                       shift and go to state 40

state 37

    (11) asignacion -> DOUBLER VARIABLE IGUAL . expresionDouble
    (24) expresionDouble -> . valorDouble operadorMat expresionDouble
    (25) expresionDouble -> . valorDouble
    (22) valorDouble -> . DOUBLE
    (23) valorDouble -> . valorInt
    (18) valorInt -> . ENTERO
    (19) valorInt -> . VARIABLE

    DOUBLE          shift and go to state 16
    ENTERO          shift and go to state 15
    VARIABLE        shift and go to state 42

    expresionDouble                shift and go to state 48
    valorDouble                    shift and go to state 13
    valorInt                       shift and go to state 44

state 38

    (12) asignacion -> NUM VARIABLE IGUAL . expresionDouble
    (24) expresionDouble -> . valorDouble operadorMat expresionDouble
    (25) expresionDouble -> . valorDouble
    (22) valorDouble -> . DOUBLE
    (23) valorDouble -> . valorInt
    (18) valorInt -> . ENTERO
    (19) valorInt -> . VARIABLE

    DOUBLE          shift and go to state 16
    ENTERO          shift and go to state 15
    VARIABLE        shift and go to state 42

    expresionDouble                shift and go to state 49
    valorDouble                    shift and go to state 13
    valorInt                       shift and go to state 44

state 39

    (13) asignacion -> STRINGR VARIABLE IGUAL . expresionString
    (16) expresionString -> . valorString operadorMat expresionString
    (17) expresionString -> . valorString
    (14) valorString -> . STRING
    (15) valorString -> . VARIABLE

    STRING          shift and go to state 17
    VARIABLE        shift and go to state 46

    expresionString                shift and go to state 50
    valorString                    shift and go to state 14

state 40

    (20) expresionInt -> valorInt . operadorMat expresionInt
    (21) expresionInt -> valorInt .
    (26) operadorMat -> . SUMA
    (27) operadorMat -> . RESTA
    (28) operadorMat -> . MULTI
    (29) operadorMat -> . DIV
    (30) operadorMat -> . DIVENTERO
    (31) operadorMat -> . MOD

    PUNTOYCOMA      reduce using rule 21 (expresionInt -> valorInt .)
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTI           shift and go to state 30
    DIV             shift and go to state 31
    DIVENTERO       shift and go to state 32
    MOD             shift and go to state 33

    operadorMat                    shift and go to state 27

state 41

    (20) expresionInt -> valorInt operadorMat expresionInt .

    PUNTOYCOMA      reduce using rule 20 (expresionInt -> valorInt operadorMat expresionInt .)


state 42

    (19) valorInt -> VARIABLE .

    SUMA            reduce using rule 19 (valorInt -> VARIABLE .)
    RESTA           reduce using rule 19 (valorInt -> VARIABLE .)
    MULTI           reduce using rule 19 (valorInt -> VARIABLE .)
    DIV             reduce using rule 19 (valorInt -> VARIABLE .)
    DIVENTERO       reduce using rule 19 (valorInt -> VARIABLE .)
    MOD             reduce using rule 19 (valorInt -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 19 (valorInt -> VARIABLE .)


state 43

    (24) expresionDouble -> valorDouble operadorMat expresionDouble .

    PUNTOYCOMA      reduce using rule 24 (expresionDouble -> valorDouble operadorMat expresionDouble .)


state 44

    (23) valorDouble -> valorInt .

    SUMA            reduce using rule 23 (valorDouble -> valorInt .)
    RESTA           reduce using rule 23 (valorDouble -> valorInt .)
    MULTI           reduce using rule 23 (valorDouble -> valorInt .)
    DIV             reduce using rule 23 (valorDouble -> valorInt .)
    DIVENTERO       reduce using rule 23 (valorDouble -> valorInt .)
    MOD             reduce using rule 23 (valorDouble -> valorInt .)
    PUNTOYCOMA      reduce using rule 23 (valorDouble -> valorInt .)


state 45

    (16) expresionString -> valorString operadorMat expresionString .

    PUNTOYCOMA      reduce using rule 16 (expresionString -> valorString operadorMat expresionString .)


state 46

    (15) valorString -> VARIABLE .

    SUMA            reduce using rule 15 (valorString -> VARIABLE .)
    RESTA           reduce using rule 15 (valorString -> VARIABLE .)
    MULTI           reduce using rule 15 (valorString -> VARIABLE .)
    DIV             reduce using rule 15 (valorString -> VARIABLE .)
    DIVENTERO       reduce using rule 15 (valorString -> VARIABLE .)
    MOD             reduce using rule 15 (valorString -> VARIABLE .)
    PUNTOYCOMA      reduce using rule 15 (valorString -> VARIABLE .)


state 47

    (10) asignacion -> INT VARIABLE IGUAL expresionInt .

    PUNTOYCOMA      reduce using rule 10 (asignacion -> INT VARIABLE IGUAL expresionInt .)


state 48

    (11) asignacion -> DOUBLER VARIABLE IGUAL expresionDouble .

    PUNTOYCOMA      reduce using rule 11 (asignacion -> DOUBLER VARIABLE IGUAL expresionDouble .)


state 49

    (12) asignacion -> NUM VARIABLE IGUAL expresionDouble .

    PUNTOYCOMA      reduce using rule 12 (asignacion -> NUM VARIABLE IGUAL expresionDouble .)


state 50

    (13) asignacion -> STRINGR VARIABLE IGUAL expresionString .

    PUNTOYCOMA      reduce using rule 13 (asignacion -> STRINGR VARIABLE IGUAL expresionString .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUMA in state 12 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 12 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 12 resolved as shift
WARNING: shift/reduce conflict for DIV in state 12 resolved as shift
WARNING: shift/reduce conflict for DIVENTERO in state 12 resolved as shift
WARNING: shift/reduce conflict for MOD in state 12 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (valorString -> VARIABLE)
WARNING: rejected rule (valorInt -> VARIABLE) in state 8
WARNING: reduce/reduce conflict in state 12 resolved using rule (expresionInt -> valorInt)
WARNING: rejected rule (valorDouble -> valorInt) in state 12
